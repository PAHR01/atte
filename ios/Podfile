platform :ios, '12.0'

# Set the path for the Flutter SDK and application
flutter_application_path = File.expand_path('..')

# Ensure that the required podspecs are loaded for Flutter
target 'Runner' do
  use_frameworks!  # Enable dynamic frameworks, required for Flutter plugins
  use_modular_headers!  # Allows the use of modular headers for Flutter plugins

  # Flutter-specific podspec reference
  pod 'Flutter', :path => File.join(flutter_application_path, '.ios', 'Flutter')

  # Automatically generated plugin registrant (this is important for Flutter plugin management)
  pod 'FlutterPluginRegistrant', :path => File.join(flutter_application_path, 'packages', 'flutter_plugin_registrant')

  # Add any other dependencies that your app needs
  # Example:
  # pod 'SomeOtherPod', '~> 1.2.3'

  # Ensure any dependencies that need manual linking are added here, if any
end

# If you need any post-install actions for CocoaPods, you can add them here
post_install do |installer|
  installer.pods_project.targets.each do |target|
    # Some Flutter plugins need this workaround for iOS builds
    if target.name == 'Flutter'
      target.build_configurations.each do |config|
        config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'
      end
    end

    # Optional: Fix for Xcode 12 and above related to use_frameworks
    if target.name.include?('Firebase') # Example for Firebase plugins
      target.build_configurations.each do |config|
        config.build_settings['SWIFT_VERSION'] = '5.0'  # Ensure the right Swift version is set
      end
    end
  end
end
